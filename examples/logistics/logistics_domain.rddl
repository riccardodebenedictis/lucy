/**
* Domain: Logistics
*/

class Object {

    real id;

    Object(real id) : id(id) {}
}

class Vehicle : Thing {

    Vehicle(real id) : Thing(id) {}
}

class Truck : Vehicle {

    Truck(real id) : Vehicle(id) {}
}

class Airplane : Vehicle {

    Airplane(real id) : Vehicle(id) {}
}

class Thing : Object {

    Thing(real id) : Object(id) {}
}

class Package : Thing {

    Package(real id) : Thing(id) {}
}

class Location : Object {

    Location(real id) : Object(id) {}
}

class Airport : Location {

    Airport(real id) : Location(id) {}
}

class City : Object {

    City(real id) : Object(id) {}
}

class LogisticsState : PropositionalState {

    LogisticsAgent agent;

    LogisticsState(LogisticsAgent agent) : agent(agent) {}

    predicate In_city(Location l, City c) {
        false;
    }

    predicate At(Thing obj, Location l) {
        duration >= 1.0;
        {
           goal drive = new agent.Drive(at:start, t:obj, to:l);
        } or {
           goal fly = new agent.Fly(at:start, a:obj, to:l);
        } or {
           goal unload = new agent.Unload(at:start, p:obj, l:l);
        }
    }

    predicate In(Package p, Vehicle veh) {
        duration >= 1.0;
        goal load = new agent.Load(at:start, p:p, v:veh);
    }
}

class LogisticsAgent : PropositionalAgent {

    LogisticsState propositional_state;

    LogisticsAgent() : propositional_state(new LogisticsState(this)) {}

    predicate Drive(Truck t, Location from, Location to, City c) : ImpulsivePredicate {
        goal _at_t_from = new propositional_state.At(polarity:true, obj:t, l:from);  _at_t_from.start <= at - 1.0;  _at_t_from.end >= at;
        goal in_city_from_c = new propositional_state.In_city(polarity:true, l:from, c:c);  in_city_from_c.start <= at - 1.0;  in_city_from_c.end >= at;
        goal in_city_to_c = new propositional_state.In_city(polarity:true, l:to, c:c);  in_city_to_c.start <= at - 1.0;  in_city_to_c.end >= at;
        fact not__at_t_from = new propositional_state.At(polarity:false, obj:t, l:from, start:at);  not__at_t_from.duration >= 1.0;
        fact _at_t_to = new propositional_state.At(polarity:true, obj:t, l:to, start:at);  _at_t_to.duration >= 1.0;
    }

    predicate Fly(Airplane a, Airport from, Airport to) : ImpulsivePredicate {
        goal _at_a_from = new propositional_state.At(polarity:true, obj:a, l:from);  _at_a_from.start <= at - 1.0;  _at_a_from.end >= at;
        fact not__at_a_from = new propositional_state.At(polarity:false, obj:a, l:from, start:at);  not__at_a_from.duration >= 1.0;
        fact _at_a_to = new propositional_state.At(polarity:true, obj:a, l:to, start:at);  _at_a_to.duration >= 1.0;
    }

    predicate Load(Vehicle v, Package p, Location l) : ImpulsivePredicate {
        goal _at_v_l = new propositional_state.At(polarity:true, obj:v, l:l);  _at_v_l.start <= at - 1.0;  _at_v_l.end >= at;
        goal _at_p_l = new propositional_state.At(polarity:true, obj:p, l:l);  _at_p_l.start <= at - 1.0;  _at_p_l.end >= at;
        fact not__at_p_l = new propositional_state.At(polarity:false, obj:p, l:l, start:at);  not__at_p_l.duration >= 1.0;
        fact in_p_v = new propositional_state.In(polarity:true, p:p, veh:v, start:at);  in_p_v.duration >= 1.0;
    }

    predicate Unload(Vehicle v, Package p, Location l) : ImpulsivePredicate {
        goal _at_v_l = new propositional_state.At(polarity:true, obj:v, l:l);  _at_v_l.start <= at - 1.0;  _at_v_l.end >= at;
        goal in_p_v = new propositional_state.In(polarity:true, p:p, veh:v);  in_p_v.start <= at - 1.0;  in_p_v.end >= at;
        fact not_in_p_v = new propositional_state.In(polarity:false, p:p, veh:v, start:at);  not_in_p_v.duration >= 1.0;
        fact _at_p_l = new propositional_state.At(polarity:true, obj:p, l:l, start:at);  _at_p_l.duration >= 1.0;
    }
}